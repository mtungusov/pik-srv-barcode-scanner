#!/usr/bin/env jruby
# Run: export BARCODE_SCANNER_ENV=development && ./bin/srv-start

if ENV['BARCODE_SCANNER_ENV']
  require 'pry'

  $: << File.join(File.dirname(__FILE__), '..')
  puts "RUN in: #{ENV['BARCODE_SCANNER_ENV']}"

  require 'config/config'
  $config = Configuration.load_config(ENV['BARCODE_SCANNER_ENV'])

  $zk_con = ENV['ZOOKEEPER_CONNECTION'] ? ENV['ZOOKEEPER_CONNECTION'] : $config['connection']['zookeeper']
  $kf_con = ENV['KAFKA_CONNECTION'] ? ENV['KAFKA_CONNECTION'] : $config['connection']['kafka']
  $sr_con = ENV['SCHEMA_REGISTRY_CONNECTION'] ? ENV['SCHEMA_REGISTRY_CONNECTION'] : $config['connection']['schema-registry']


  require 'java'
  ENV['CLASSPATH'] = "./vendor/java/schema-registry/*"

  require 'json'
  require 'celluloid/current'

  $: << 'lib'

  require 'logging'

  # binding.pry

  require 'producer'
  require 'producer/state_store'
  require 'workers'

  Logging.supervise as: :logger
  $log = Celluloid::Actor[:logger]
  $log.info "Service starting..."

  $RUNNING = true

  Workers::Producer.supervise as: :kafka_producer
  Producer::StateStore.supervise as: :queue_store, args: [:kafka_producer]

  trap('SIGINT') do
    $RUNNING = false
  end

  while $RUNNING
    Celluloid::Actor[:queue_store].async.push_and_send(Producer::generate_random_msg)
    sleep 2.0
  end

  Celluloid::Actor[:kafka_producer].shutdown
  Celluloid::Actor[:queue_store].save
  $log.info "SHUTDOWN in #{Time.now}"

else
  puts 'Error: not found "BARCODE_SCANNER_ENV"!'
end
